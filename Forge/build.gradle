buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
		maven { url = 'https://plugins.gradle.org/m2/' }
        jcenter()
        gradlePluginPortal()
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath "com.modrinth.minotaur:Minotaur:2.+"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "com.modrinth.minotaur"

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

configurations {
    shade
}

minecraft {
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'
    
    accessTransformer = file(
        'src/main/resources/META-INF/accesstransformer.cfg'
    )
    
    runs {
        client {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'geckolib-forge116-Client'

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                geckolib {
                    source sourceSets.main
                }
            }
        }

        clientAlt {
            parent minecraft.runs.client
            workingDirectory project.file('runs/' + name)
            taskName 'geckolib-forge116-ClientAlt'
            args '--username', 'Alt'
        }

        server {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'geckolib-forge116-Server'

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                geckolib {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url "https://maven.enginehub.org/repo/" }
	maven { url "https://cursemaven.com" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "https://maven.cloudsmith.io/geckolib3/geckolib/" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.2'
    compileOnly 'com.eliotlash.mclib:mclib:20'
    compileOnly(project(':geckolib-core')) {
        exclude group: 'org.apache.commons'
    }
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    compileOnly group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0'
	compileOnly group: 'org.jetbrains', name: 'annotations', version: '20.1.0'

	compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3:api")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3")
	
    shade 'com.eliotlash.mclib:mclib:20'
    shade project(':geckolib-core')
    shade group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    shade group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0'

    test {
        useJUnitPlatform()
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('META-INF/services/**')
    exclude('it/**')
    exclude('com/google/**')
    relocate 'com.eliotlash', 'software.bernie.shadowed.eliotlash'
    relocate 'com.fasterxml', 'software.bernie.shadowed.fasterxml'
    classifier ''
}


reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}
tasks.build.dependsOn reobfShadowJar
publish.dependsOn('reobfJar')
shadowJar.dependsOn('classes')
jar.finalizedBy('reobfJar')

jar {
    manifest {
        attributes([
                "Specification-Title"     : "GeckoLib",
                "Specification-Vendor"    : "Gecko",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Gecko",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task packageSources(type: ShadowJar, dependsOn: 'classes') {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('META-INF/**')
    exclude('it/**')
    exclude('com/google/**')
    relocate 'com.eliotlash', 'software.bernie.shadowed.eliotlash'
    relocate 'com.fasterxml', 'software.bernie.shadowed.fasterxml'
    classifier = 'sources'
}

artifacts {
    archives shadowJar
    archives packageSources
}

afterEvaluate {
    publish.dependsOn('reobfShadowJar')
    publish.dependsOn('reobfJar')
    publish.dependsOn('packageSources')
    shadowJar.dependsOn(packageSources)
    shadowJar.dependsOn('classes')
}

shadowJar.finalizedBy(reobfShadowJar)
jar.finalizedBy(packageSources)

// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             artifact shadowJar
//             artifact packageSources
//             artifactId = project.archives_base_name
//         }
//     }
// }
publishing {
    repositories {
        maven {
	      name = "GitHubPackages"
	      url = uri("https://maven.pkg.github.com/VeguiDev/geckolib")
	      credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
	      }
	    }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "388172"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
            addGameVersion("1.16.5")
            addGameVersion("Forge")
            addGameVersion("Java 8")
        }
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = '8BmcQJ2H' 
		versionNumber = project.mod_version 
		versionName = 'Forge 1.16.5'
		uploadFile = jar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.16.5']
		loaders = ['forge']
	}
}